---
description: Rules for importing using `box` package.
globs: *.R
alwaysApply: false
---
### Importing

Use only `box::use` for imports. Using `library()` and `::` is forbidden.

`box::use` statements should be located at the top of the file with the following rules:
- Group packages and local scripts into separate `box::use` blocks.
- First block should import only R packages, second block should import only other scripts.
- Imports in each block should be sorted alphabetically.
- Using `[...]` is forbidden.
- All external functions in a script should be explicitly imported, including operators like `%>%`.
- A script should only import functions that it actually uses.

There are two ways to import packages or scripts:

1. **List specific imported functions** (preferred when importing â‰¤ 8 functions):
```r
box::use(
  dplyr[filter],
)

filter(mtcars, cyl > 4)
```

2. **Import package/module and access functions with `$`** (use when importing > 8 functions):
```r
box::use(
  dplyr,
)

dplyr$filter(mtcars, cyl > 4)
dplyr$select(mtcars, mpg, cyl)
# ... other dplyr functions used
```

### When Moving Functions

When moving a function to a different script:
1. Add imports for all required functions to the destination file.
2. Use the appropriate import style in the new file (direct or using `$`).
3. Remove redundant imports from the original file.
4. Import the moved function in the original file.

### Exporting

- If a function is used only inside a script, it should not be exported.
- If a function is used by other scripts, export it by adding `#' @export` before the function definition.